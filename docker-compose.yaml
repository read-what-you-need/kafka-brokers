version: "2.1"

services:
  zoo:
    image: confluentinc/cp-zookeeper:7.0.1
    hostname: zoo
    user: "0:0"
    container_name: zoo
    restart: always
    networks:
      - kafka-network
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo:2888:3888
    volumes:
      - ./zoo/data:/var/lib/zookeeper/data
      - ./zoo/log:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    hostname: kafka
    user: "0:0"
    container_name: kafka
    ports:
      - "9092:9092"
      - "9010:9010"
    restart: always
    networks:
      - kafka-network
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka -Dcom.sun.management.jmxremote.rmi.port=9010"
      JMX_PORT: 9010
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    volumes:
      - ./broker/data:/var/lib/kafka/data
    depends_on:
      - zoo

  jmx-kafka101:
    image: "sscaling/jmx-prometheus-exporter"
    ports:
      - "5556:5556"
    networks:
      - kafka-network
    environment:
      CONFIG_YML: "/etc/jmx_exporter/config.yml"
    volumes:
      - ./etc/jmx_exporter/config_kafka101.yml:/etc/jmx_exporter/config.yml
    container_name: jmx-kafka101
    depends_on:
      - zoo
      - kafka

  kafka-init-topics:
    image: confluentinc/cp-kafka:7.0.1
    depends_on:
      - kafka
    networks:
      - kafka-network
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:19092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:19092 --create --if-not-exists --topic  files_job_submit --partitions 1 --replication-factor 1
      kafka-topics --bootstrap-server kafka:19092 --create --if-not-exists --topic  files_status_updates --partitions 2 --replication-factor 1
      kafka-topics --bootstrap-server kafka:19092 --create --if-not-exists --topic  files_processed --partitions 2 --replication-factor 1
      kafka-topics --bootstrap-server kafka:19092 --create --if-not-exists --topic  files_failed_queue --partitions 1 --replication-factor 1
      kafka-topics --bootstrap-server kafka:19092 --create --if-not-exists --topic  files_to_process --partitions 3 --replication-factor 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:19092 --list
        "
networks:
  kafka-network:
    name: kafka-docker-network
